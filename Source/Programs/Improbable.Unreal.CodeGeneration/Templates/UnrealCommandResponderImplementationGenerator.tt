<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#

#>
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// ===========

#include "<#= commandDetails.CapitalisedName #>CommandResponder.h"

<# foreach (var requiredInclude in commandDetails.UnrealResponseTypeDetails.RequiredIncludes) { #>
#include <#= requiredInclude #>
<# } #>

#include "SpatialGDKWorkerTypes.h"

U<#= commandDetails.CapitalisedName #>CommandResponder::U<#= commandDetails.CapitalisedName #>CommandResponder()
{
}

U<#= commandDetails.CapitalisedName #>CommandResponder* U<#= commandDetails.CapitalisedName #>CommandResponder::Init(
    const TWeakPtr<SpatialOSConnection>& InConnection,
    worker::RequestId<
        worker::IncomingCommandRequest<<#= commandDetails.QualifiedOwnerName #>::Commands::<#= commandDetails.UnderlyingCapitalisedName #>>>
	InRequestId,
    <#= commandDetails.UnrealRequestTypeDetails.UnrealType #> InRequest,
	const std::string& InCallerWorkerId
)
{
    Connection = InConnection;
    RequestId = InRequestId;
    Request = InRequest;
	CallerWorkerId = FString(InCallerWorkerId.c_str());
	return this;
}

<#= commandDetails.UnrealRequestTypeDetails.UnrealType #> U<#= commandDetails.CapitalisedName #>CommandResponder::GetRequest()
{
	return Request;
}

FString U<#= commandDetails.CapitalisedName #>CommandResponder::GetCallerWorkerId()
{
	return CallerWorkerId;
}

void U<#= commandDetails.CapitalisedName #>CommandResponder::SendResponse(<#= commandDetails.UnrealResponseTypeDetails.UnrealType #> response)
{
	auto underlyingResponse = <#= commandDetails.UnrealResponseTypeDetails.ConvertUnrealValueToUnderlyingValue("response") #>;

	auto LockedConnection = Connection.Pin();

	if(LockedConnection.IsValid())
	{
	    LockedConnection->SendCommandResponse(
			RequestId, <#= commandDetails.QualifiedOwnerName #>::Commands::<#= commandDetails.UnderlyingCapitalisedName #>::Response(underlyingResponse));
	}
}
