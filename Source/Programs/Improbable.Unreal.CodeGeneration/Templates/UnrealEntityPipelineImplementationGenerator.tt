<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#

#>
// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// ===========

#include "EntityPipeline.h"
#include "EntityPipelineBlock.h"
#include "CoreMinimal.h"

#include "SpatialGDKViewTypes.h"
#include "SpatialGDKWorkerTypes.h"
#include "CallbackDispatcher.h"
<# foreach (var unrealComponent in unrealComponents) { #>
#include "<#= unrealComponent.CapitalisedName #>AddComponentOp.h"
<# } #>

/**
*
*/

DECLARE_LOG_CATEGORY_EXTERN(LogEntityPipeline, Log, All);
DEFINE_LOG_CATEGORY(LogEntityPipeline);

UEntityPipeline::UEntityPipeline()
: FirstBlock(nullptr)
, LastBlock(nullptr)
, CallbackDispatcher(nullptr)
, bInitialised(false)
{
}

void UEntityPipeline::Init(const TWeakPtr<SpatialOSView>& InView, UCallbackDispatcher* InCallbackDispatcher)
{
	checkf(!bInitialised, TEXT("Attempting to call Init more than once!"));
	checkf(FirstBlock, TEXT("Trying to bind callbacks but no blocks have been added!"));

	Callbacks.Init(InView);
	CallbackDispatcher = InCallbackDispatcher;
	CallbackDispatcher->OnAuthorityChangeOpReceived.AddUObject(this, &UEntityPipeline::OnAuthorityChange);

	auto LockedView = InView.Pin();
	if (LockedView.IsValid())
	{
		Callbacks.Add(LockedView->OnAddEntity(
			std::bind(&UEntityPipeline::OnAddEntity, this, std::placeholders::_1)));

		Callbacks.Add(LockedView->OnRemoveEntity(
			std::bind(&UEntityPipeline::OnRemoveEntity, this, std::placeholders::_1)));

		Callbacks.Add(LockedView->OnCriticalSection(
			std::bind(&UEntityPipeline::OnCriticalSection, this, std::placeholders::_1)));

<# foreach (var unrealComponent in unrealComponents) { #>
		Callbacks.Add(LockedView->OnAddComponent<<#= unrealComponent.UnderlyingQualifiedName #>>(
			std::bind(&UEntityPipeline::Add<#= unrealComponent.CapitalisedName #>ComponentOp, this, std::placeholders::_1)));
<# } #>

<# foreach (var unrealComponent in unrealComponents) { #>
		Callbacks.Add(LockedView->OnRemoveComponent<<#= unrealComponent.UnderlyingQualifiedName #>>(
			std::bind(&UEntityPipeline::Remove<#= unrealComponent.CapitalisedName #>ComponentOp, this, std::placeholders::_1)));
<# } #>

	}
	bInitialised = true;
}

void UEntityPipeline::DeregisterAllCallbacks()
{
	if (CallbackDispatcher != nullptr)
	{
		CallbackDispatcher->Reset();
		CallbackDispatcher = nullptr;
	}
	Callbacks.Reset();
	bInitialised = false;
}

void UEntityPipeline::AddBlock(UEntityPipelineBlock* NewBlock)
{
    checkf(!bInitialised, TEXT("Cannot add blocks after the pipeline has started"));

    if(FirstBlock == nullptr)
	{
		FirstBlock = NewBlock;
	}
	if(LastBlock != nullptr)
	{
		LastBlock->NextBlock = NewBlock;
	}
	LastBlock = NewBlock;
}

void UEntityPipeline::ProcessOps(const TWeakPtr<SpatialOSView>& InView, const TWeakPtr<SpatialOSConnection>& InConnection, UWorld* World)
{
	auto Block = FirstBlock;

	while (Block != nullptr)
	{
		Block->ProcessOps(InView, InConnection, World, CallbackDispatcher);
		Block = Block->NextBlock;
	}
}

<# foreach (var unrealComponent in unrealComponents) { #>
void UEntityPipeline::Add<#= unrealComponent.CapitalisedName #>ComponentOp(const worker::AddComponentOp<<#= unrealComponent.UnderlyingQualifiedName #>>& Op) {
	U<#= unrealComponent.CapitalisedName #>AddComponentOp* NewOp = NewObject<U<#= unrealComponent.CapitalisedName #>AddComponentOp>();
	if (NewOp)
	{
		NewOp->Data = Op.Data;
		NewOp->ComponentId = <#= unrealComponent.UnderlyingQualifiedName #>::ComponentId;
		NewOp->EntityId = Op.EntityId;

		FirstBlock->AddComponent(NewOp);
	}
}

void UEntityPipeline::Remove<#= unrealComponent.CapitalisedName #>ComponentOp(const worker::RemoveComponentOp& Op) {
	const worker::ComponentId ComponentId = <#= unrealComponent.UnderlyingQualifiedName #>::ComponentId;
	FirstBlock->RemoveComponent(ComponentId, Op);
}
<# } #>
