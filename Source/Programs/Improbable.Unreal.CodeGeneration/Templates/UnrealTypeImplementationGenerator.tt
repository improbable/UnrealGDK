<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#

#>
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// =========== 

#include "<#= unrealType.CapitalisedName #>.h"

<# foreach (var fieldDetails in unrealType.FieldDetailsList) { #>
<# if (fieldDetails.IsUObject()) { #>
<# foreach (var requiredInclude in fieldDetails.TypeReference.RequiredIncludes) { #>
#include <#= requiredInclude #>
<# } #>
<# } #>
<# } #>

U<#= unrealType.CapitalisedName #>::U<#= unrealType.CapitalisedName #>()
{
<# var parameterList = unrealType.FieldDetailsList.Select(field => field.TypeReference.DefaultInitialisationString).ToArray(); 
   var combinedStrings = string.Join(", ", parameterList); #>
	Underlying.Reset(new <#= unrealType.UnderlyingQualifiedName #>(<#= combinedStrings #>));
}

U<#= unrealType.CapitalisedName #>* U<#= unrealType.CapitalisedName #>::Init(const <#= unrealType.UnderlyingQualifiedName #>& underlying)
{
    Underlying.Reset(new <#= unrealType.UnderlyingQualifiedName #>(underlying));
	return this;
}

<# foreach (var fieldDetails in unrealType.FieldDetailsList) { #>
<#= fieldDetails.TypeReference.UnrealType #> U<#= unrealType.CapitalisedName #>::Get<#= fieldDetails.CapitalisedName #>()
{
    return <#= fieldDetails.TypeReference.ConvertUnderlyingValueToUnrealLocalVariable("Underlying->" + fieldDetails.LowercaseName + "()") #>;
}
U<#= unrealType.CapitalisedName #>* U<#= unrealType.CapitalisedName #>::Set<#= fieldDetails.CapitalisedName #>(<#= fieldDetails.TypeReference.UnrealType #> <#= fieldDetails.LowercaseName #>)
{
    Underlying->set_<#= fieldDetails.LowercaseName #>(<#= fieldDetails.TypeReference.ConvertUnrealValueToUnderlyingValue(fieldDetails.LowercaseName) #>);
	return this;
}

<# } #>

<#= unrealType.UnderlyingQualifiedName #> U<#= unrealType.CapitalisedName #>::GetUnderlying()
{
	return *Underlying.Get();
}
