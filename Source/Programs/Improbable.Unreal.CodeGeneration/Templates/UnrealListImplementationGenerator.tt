<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#

#>
#include "<#= listTypeReference.UnderlyingCapitalisedName #>List.h"
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// =========== 

U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List()
{
}

U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List* U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::Init(const worker::List<<#= listTypeReference.UnderlyingQualifiedName #>>& underlying)
{
	Underlying = worker::List<<#= listTypeReference.UnderlyingQualifiedName #>>(underlying);
	return this;
}

U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List* U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::Add(<#= listTypeReference.UnderlyingValueType.ArgumentName #> value)
{
	auto underlyingValue = <#= listTypeReference.UnderlyingValueType.ConvertUnrealValueToUnderlyingValue("value") #>;
	Underlying.emplace_back(underlyingValue);
	return this;
}

<#= listTypeReference.UnderlyingValueType.UnrealType #> U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::Get(int pos)
{
	return <#= listTypeReference.UnderlyingValueType.ConvertUnderlyingValueToUnrealLocalVariable("(Underlying)[pos]") #>;
}

U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List* U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::Clear()
{
	Underlying.clear();
	return this;
}

bool U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::IsEmpty()
{
	return Underlying.empty();
}

int U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::Size()
{
	return static_cast<int>(Underlying.size());
}

bool U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::operator==(const worker::List<<#= listTypeReference.UnderlyingValueType.UnderlyingQualifiedName #>>& OtherUnderlying) const
{
	return Underlying == OtherUnderlying;
}

bool U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::operator!=(const worker::List<<#= listTypeReference.UnderlyingValueType.UnderlyingQualifiedName #>>& OtherUnderlying) const
{
	return Underlying != OtherUnderlying;
}

worker::List<<#= listTypeReference.UnderlyingValueType.UnderlyingQualifiedName #>> U<#= listTypeReference.UnderlyingValueType.UnderlyingCapitalisedName #>List::GetUnderlying()
{
	return Underlying;
}
