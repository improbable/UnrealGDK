<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Improbable.CodeGeneration.Model" #>
<#@ import namespace="Improbable.Unreal.CodeGeneration.SchemaProcessing.TypeReferences" #>
<#

#>
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// ===========

#pragma once

#include "CoreMinimal.h"
#include "ScopedViewCallbacks.h"
<# foreach (var packageInclude in packageIncludes) { #>
#include "<#= packageInclude #>"
<# } #>
#include "EntityId.h"
#include "RequestId.h"
#include "ComponentId.h"
#include "CommanderTypes.h"
#include "EntityTemplate.h"
#include "EntityQueryConstraints.h"
#include "EntityQueryCommandResult.h"
#include "SpatialOSCommandResult.h"
#include "SpatialOsComponent.h"
#include "SpatialGDKViewTypes.h"
#include "SpatialGDKWorkerTypes.h"

#include "Commander.generated.h"

class USpatialOsComponent;
<# foreach (var responseTypeName in responseTypeNames) { #>
class <#= responseTypeName #>;
<# } #>

DECLARE_DYNAMIC_DELEGATE_TwoParams(FReserveEntityIdResultDelegate, const FSpatialOSCommandResult&, result, FEntityId, reservedEntityId);
DECLARE_DYNAMIC_DELEGATE_TwoParams(FReserveEntityIdsResultDelegate, const FSpatialOSCommandResult&, result, const TArray<FEntityId>&, reservedEntityIds);
DECLARE_DYNAMIC_DELEGATE_TwoParams(FCreateEntityResultDelegate, const FSpatialOSCommandResult&, result, FEntityId, createdEntityId);
DECLARE_DYNAMIC_DELEGATE_OneParam(FDeleteEntityResultDelegate, const FSpatialOSCommandResult&, result);
DECLARE_DYNAMIC_DELEGATE_OneParam(FEntityQueryCountResultDelegate, UEntityQueryCountCommandResult*, result);
DECLARE_DYNAMIC_DELEGATE_OneParam(FEntityQuerySnapshotResultDelegate, UEntityQuerySnapshotCommandResult*, result);
<# foreach (var commandDetails in commandDetailsList) { #>
DECLARE_DYNAMIC_DELEGATE_TwoParams(F<#= commandDetails.CapitalisedName #>CommandResultDelegate, const FSpatialOSCommandResult&, result, <#= commandDetails.UnrealResponseTypeDetails.UnrealType #>, response);
<# } #>

/**
*
*/
UCLASS(BlueprintType)
class SPATIALGDK_API UCommander : public UObject
{
	GENERATED_BODY()

public:
	UCommander();

	UCommander* Init(USpatialOsComponent* component, const TWeakPtr<SpatialOSConnection>& InConnection, const TWeakPtr<SpatialOSView>& InView);

	virtual void BeginDestroy() override;

	UFUNCTION(BlueprintCallable, Category = "SpatialOS Commands")
	FRequestId ReserveEntityId(const FReserveEntityIdResultDelegate& callback, int timeoutMs);

	UFUNCTION(BlueprintCallable, Category = "SpatialOS Commands")
	FRequestId ReserveEntityIds(int NumEntitiesToReserve, const FReserveEntityIdsResultDelegate& callback, int timeoutMs);

	UFUNCTION(BlueprintCallable, Category = "SpatialOS Commands")
	FRequestId CreateEntity(UEntityTemplate* entityTemplate, FEntityId entityId, const FCreateEntityResultDelegate& callback, int timeoutMs);

	UFUNCTION(BlueprintCallable, Category = "SpatialOS Commands")
	FRequestId DeleteEntity(FEntityId entityId, const FDeleteEntityResultDelegate& callback, int timeoutMs);

	UFUNCTION(BlueprintCallable, Category = "Commands")
	FRequestId EntityQueryCountRequest(UEntityQueryConstraint* EntityQuery, const FEntityQueryCountResultDelegate& callback, int timeoutMs);

	UFUNCTION(BlueprintCallable, Category = "Commands", meta = (AutoCreateRefTerm = "ComponentIds"))
	FRequestId EntityQuerySnapshotRequest(UEntityQueryConstraint* EntityQuery, const TArray<FComponentId>& ComponentIds, const FEntityQuerySnapshotResultDelegate& callback, int timeoutMs);

<# foreach (var commandDetails in commandDetailsList) { #>
	UFUNCTION(BlueprintCallable, Category = "SpatialOS Commands")
	FRequestId <#= commandDetails.CapitalisedName #>(FEntityId entityId, <#= commandDetails.UnrealRequestTypeDetails.UnrealType #> request, const F<#= commandDetails.CapitalisedName #>CommandResultDelegate& callback, int timeoutMs, ECommandDelivery commandDelivery = ECommandDelivery::ROUNDTRIP);

<# } #>
	static ECommandResponseCode GetCommandResponseCode(const worker::StatusCode UnderlyingStatusCode);

private:
	TWeakPtr<SpatialOSConnection> Connection;
	TWeakPtr<SpatialOSView> View;

	UPROPERTY()
	USpatialOsComponent* Component;

	UPROPERTY()
	UEntityQueryCountCommandResult* EntityQueryCountCommandResult;

	UPROPERTY()
	UEntityQuerySnapshotCommandResult* EntityQuerySnapshotCommandResult;

<# foreach (var commandDetails in commandDetailsList) { #>
<# if (commandDetails.UnrealResponseTypeDetails.ReferenceType == ReferenceType.UserType) { #>
	UPROPERTY()
	<#= commandDetails.UnrealResponseTypeDetails.UnrealType #> <#= commandDetails.CapitalisedName #>Response;
<# } #>
<# } #>

	TUniquePtr<improbable::unreal::callbacks::FScopedViewCallbacks> Callbacks;

	TMap<uint32_t, const FReserveEntityIdResultDelegate> RequestIdToReserveEntityIdCallback;
	void OnReserveEntityIdResponseDispatcherCallback(const worker::ReserveEntityIdResponseOp& op);

	TMap<uint32_t, const FReserveEntityIdsResultDelegate> RequestIdToReserveEntityIdsCallback;
	void OnReserveEntityIdsResponseDispatcherCallback(const worker::ReserveEntityIdsResponseOp& op);

    TMap<uint32_t, const FCreateEntityResultDelegate> RequestIdToCreateEntityCallback;
	void OnCreateEntityResponseDispatcherCallback(const worker::CreateEntityResponseOp& op);

    TMap<uint32_t, const FDeleteEntityResultDelegate> RequestIdToDeleteEntityCallback;
	void OnDeleteEntityResponseDispatcherCallback(const worker::DeleteEntityResponseOp& op);

	TMap<uint32_t, FEntityQueryCountResultDelegate> RequestIdToEntityQueryCountCommandCallback;
	TMap<uint32_t, FEntityQuerySnapshotResultDelegate> RequestIdToEntityQuerySnapshotCommandCallback;
	void OnEntityQueryCommandResponseDispatcherCallback(const worker::EntityQueryResponseOp& op);

<# foreach (var commandDetails in commandDetailsList) { #>
	TMap<uint32_t, const F<#= commandDetails.CapitalisedName #>CommandResultDelegate> RequestIdTo<#= commandDetails.CapitalisedName #>CommandCallback;
	void On<#= commandDetails.CapitalisedName #>CommandResponseDispatcherCallback(const worker::CommandResponseOp<<#= commandDetails.QualifiedOwnerName #>::Commands::<#= commandDetails.UnderlyingCapitalisedName #>>& op);

<# } #>
};
