//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Unreal.CodeGeneration {
    using System.Collections.Generic;
    using System.Linq;
    using System;
    using Improbable.CodeGeneration.Jobs;
    
    
    public partial class UnrealTypeImplementationGenerator : UnrealTypeImplementationGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "Templates\UnrealTypeImplementationGenerator.tt"



            
            #line default
            #line hidden
            
            #line 7 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("// ===========\r\n// DO NOT EDIT - this file is automatically regenerated.\r\n// ====" +
                    "======= \r\n\r\n#include \"");
            
            #line default
            #line hidden
            
            #line 11 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 11 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(".h\"\r\n\r\nU");
            
            #line default
            #line hidden
            
            #line 13 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 13 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("::U");
            
            #line default
            #line hidden
            
            #line 13 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 13 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("()\r\n{\r\n");
            
            #line default
            #line hidden
            
            #line 15 "Templates\UnrealTypeImplementationGenerator.tt"
 var parameterList = unrealType.FieldDetailsList.Select(field => field.TypeReference.DefaultInitialisationString).ToArray(); 
   var combinedStrings = string.Join(", ", parameterList); 
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("\tUnderlying.Reset(new ");
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( combinedStrings ));
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("));\r\n}\r\n\r\nU");
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("* U");
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("::Init(const ");
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("& underlying)\r\n{\r\n    Underlying.Reset(new ");
            
            #line default
            #line hidden
            
            #line 22 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 22 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("(underlying));\r\n\treturn this;\r\n}\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 26 "Templates\UnrealTypeImplementationGenerator.tt"
 foreach (var fieldDetails in unrealType.FieldDetailsList) { 
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.TypeReference.UnrealType ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(" U");
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("::Get");
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("()\r\n{\r\n    return ");
            
            #line default
            #line hidden
            
            #line 29 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.TypeReference.ConvertUnderlyingValueToUnrealLocalVariable("Underlying->" + fieldDetails.LowercaseName + "()") ));
            
            #line default
            #line hidden
            
            #line 29 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(";\r\n}\r\nU");
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("* U");
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("::Set");
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.TypeReference.UnrealType ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.LowercaseName ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(")\r\n{\r\n    Underlying->set_");
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.LowercaseName ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.TypeReference.ConvertUnrealValueToUnderlyingValue(fieldDetails.LowercaseName) ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(");\r\n\treturn this;\r\n}\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 37 "Templates\UnrealTypeImplementationGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(" U");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealType.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealTypeImplementationGenerator.tt"
            this.Write("::GetUnderlying()\r\n{\r\n\treturn *Underlying.Get();\r\n}\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class UnrealTypeImplementationGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
