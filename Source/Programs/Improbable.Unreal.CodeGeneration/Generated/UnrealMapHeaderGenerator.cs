//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Unreal.CodeGeneration {
    using System.Collections.Generic;
    using System;
    using Improbable.CodeGeneration.Jobs;
    
    
    public partial class UnrealMapHeaderGenerator : UnrealMapHeaderGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates\UnrealMapHeaderGenerator.tt"



            
            #line default
            #line hidden
            
            #line 6 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("// ===========\r\n// DO NOT EDIT - this file is automatically regenerated.\r\n// ====" +
                    "======= \r\n\r\n#pragma once\r\n\r\n#include \"CoreMinimal.h\"\r\n#include \"improbable/colle" +
                    "ctions.h\"\r\n#include \"UObject/NoExportTypes.h\"\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 16 "Templates\UnrealMapHeaderGenerator.tt"
 foreach (var requiredInclude in mapTypeReference.ValueType.RequiredIncludes) { 
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("#include ");
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( requiredInclude ));
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 18 "Templates\UnrealMapHeaderGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 19 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 20 "Templates\UnrealMapHeaderGenerator.tt"
 foreach (var requiredInclude in mapTypeReference.KeyType.RequiredIncludes) { 
            
            #line default
            #line hidden
            
            #line 21 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("#include ");
            
            #line default
            #line hidden
            
            #line 21 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( requiredInclude ));
            
            #line default
            #line hidden
            
            #line 21 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 22 "Templates\UnrealMapHeaderGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 23 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("\r\n#include \"");
            
            #line default
            #line hidden
            
            #line 24 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 24 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 24 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 24 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map.generated.h\"\r\n\r\n/**\r\n *\r\n */\r\nUCLASS(BlueprintType)\r\nclass SPATIALOS_API U");
            
            #line default
            #line hidden
            
            #line 30 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 30 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 30 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 30 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map : public UObject\r\n{\r\n    GENERATED_BODY()\r\n\r\n  public:\r\n    U");
            
            #line default
            #line hidden
            
            #line 35 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 35 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 35 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 35 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map();\r\n    U");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map* Init(const worker::Map<");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(">& underlying);\r\n\r\n    UFUNCTION(BlueprintCallable, Category = \"");
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    U");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map* Emplace(");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.ArgumentName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" key, ");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.ArgumentName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" value);\r\n\r\n    UFUNCTION(BlueprintCallable, Category = \"");
            
            #line default
            #line hidden
            
            #line 41 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 41 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 41 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 41 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    U");
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map* Remove(");
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.ArgumentName ));
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" key);\r\n\r\n    UFUNCTION(BlueprintPure, Category = \"");
            
            #line default
            #line hidden
            
            #line 44 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 44 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 44 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 44 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    bool Contains(");
            
            #line default
            #line hidden
            
            #line 45 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.ArgumentName ));
            
            #line default
            #line hidden
            
            #line 45 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" key);\r\n\r\n    UFUNCTION(BlueprintCallable, Category = \"");
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    ");
            
            #line default
            #line hidden
            
            #line 48 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnrealType ));
            
            #line default
            #line hidden
            
            #line 48 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" Get(");
            
            #line default
            #line hidden
            
            #line 48 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.ArgumentName ));
            
            #line default
            #line hidden
            
            #line 48 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(" key);\r\n\r\n    UFUNCTION(BlueprintCallable, Category = \"");
            
            #line default
            #line hidden
            
            #line 50 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 50 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 50 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 50 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    U");
            
            #line default
            #line hidden
            
            #line 51 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 51 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 51 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 51 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map* Clear();\r\n\r\n    UFUNCTION(BlueprintPure, Category = \"");
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("To");
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingCapitalisedName ));
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("Map\")\r\n    bool IsEmpty();\r\n\r\n    worker::Map<");
            
            #line default
            #line hidden
            
            #line 56 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 56 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 56 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 56 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("> GetUnderlying();\r\n\r\n\tbool operator==(const worker::Map<");
            
            #line default
            #line hidden
            
            #line 58 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 58 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 58 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 58 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(">& OtherUnderlying) const;\r\n\tbool operator!=(const worker::Map<");
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(">& OtherUnderlying) const;\r\n\r\n  private:\r\n    worker::Map<");
            
            #line default
            #line hidden
            
            #line 62 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.KeyType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 62 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 62 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( mapTypeReference.ValueType.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 62 "Templates\UnrealMapHeaderGenerator.tt"
            this.Write("> Underlying;\r\n};\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class UnrealMapHeaderGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
