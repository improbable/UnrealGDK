//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Unreal.CodeGeneration {
    using System.Collections.Generic;
    using System;
    using Improbable.CodeGeneration.Jobs;
    
    
    public partial class UnrealCallbackDispatcherImplementationGenerator : UnrealCallbackDispatcherImplementationGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"



            
            #line default
            #line hidden
            
            #line 6 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("// Copyright (c) Improbable Worlds Ltd, All Rights Reserved\r\n// ===========\r\n// D" +
                    "O NOT EDIT - this file is automatically regenerated.\r\n// =========== \r\n\r\n\r\n#incl" +
                    "ude \"CallbackDispatcher.h\"\r\n#include \"ComponentUpdateOpWrapperBase.h\"\r\n");
            
            #line default
            #line hidden
            
            #line 14 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 foreach (var unrealComponent in unrealComponents) { 
            
            #line default
            #line hidden
            
            #line 15 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 15 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 15 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("ComponentUpdate.h\"\r\n");
            
            #line default
            #line hidden
            
            #line 16 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 17 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(@"#include ""ScopedViewCallbacks.h""
#include ""SpatialOSViewTypes.h""


DECLARE_LOG_CATEGORY_EXTERN(LogCallbackDispatcher, Log, All);
DEFINE_LOG_CATEGORY(LogCallbackDispatcher);

UCallbackDispatcher::UCallbackDispatcher() : bInitialised(false)
{
}

void UCallbackDispatcher::Init(const TWeakPtr<SpatialOSView>& InView)
{
	checkf(!bInitialised, TEXT(""Attempting to call Init more than once!""));
	Callbacks.Init(InView);

	auto LockedView = InView.Pin();
	if(LockedView.IsValid())
	{
");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 foreach (var unrealComponent in unrealComponents) { 
            
            #line default
            #line hidden
            
            #line 37 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("\t\tCallbacks.Add(LockedView->OnComponentUpdate<");
            
            #line default
            #line hidden
            
            #line 37 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 37 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(">(std::bind(\r\n\t\t\t&UCallbackDispatcher::On");
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 38 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("ComponentUpdateOp, this, std::placeholders::_1)));\r\n\t\tCallbacks.Add(LockedView->O" +
                    "nAuthorityChange<");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(">(std::bind(\r\n\t\t\t&UCallbackDispatcher::On");
            
            #line default
            #line hidden
            
            #line 40 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 40 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("AuthorityChangeOp, this, std::placeholders::_1)));\r\n");
            
            #line default
            #line hidden
            
            #line 41 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("\t}\r\n\tbInitialised = true;\r\n}\r\n\r\nvoid UCallbackDispatcher::Reset()\r\n{\r\n\tComponentU" +
                    "pdateCallbacks.Reset();\r\n\tAuthorityChangeCallbacks.Reset();\r\n\tQueuedUpdates.Rese" +
                    "t();\r\n\tCallbacks.Reset();\r\n\tbInitialised = false;\r\n}\r\n\r\nvoid UCallbackDispatcher" +
                    "::AddComponentUpdateCallback(worker::EntityId EntityId, worker::ComponentId Comp" +
                    "onentId, TFunction<void(UComponentUpdateOpWrapperBase&)> Callback)\r\n{\r\n\tFCompone" +
                    "ntIdentifier Id{ EntityId, ComponentId };\r\n\tComponentUpdateCallbacks.Emplace(Id," +
                    " Callback);\r\n\tDispatchQueuedUpdates(Id);\r\n}\r\n\r\nvoid UCallbackDispatcher::AddAuth" +
                    "orityChangeCallback(worker::EntityId EntityId, worker::ComponentId ComponentId, " +
                    "TFunction<void(const worker::AuthorityChangeOp&)> Callback)\r\n{\r\n\tAuthorityChange" +
                    "Callbacks.Emplace(FComponentIdentifier{EntityId, ComponentId}, Callback);\r\n}\r\n\r\n" +
                    "void UCallbackDispatcher::RemoveComponentUpdateCallback(worker::EntityId EntityI" +
                    "d, worker::ComponentId ComponentId)\r\n{\r\n\tComponentUpdateCallbacks.Remove(FCompon" +
                    "entIdentifier{EntityId, ComponentId});\r\n}\r\n\r\nvoid UCallbackDispatcher::RemoveAut" +
                    "horityChangeCallback(worker::EntityId EntityId, worker::ComponentId ComponentId)" +
                    "\r\n{\r\n\tAuthorityChangeCallbacks.Remove(FComponentIdentifier{EntityId, ComponentId" +
                    "});\r\n}\r\n\r\nvoid UCallbackDispatcher::HandleUpdate(UComponentUpdateOpWrapperBase* " +
                    "Update)\r\n{\r\n\tFComponentIdentifier Id{ Update->EntityId, Update->ComponentId };\r\n" +
                    "\r\n\tauto Callback = ComponentUpdateCallbacks.Find(Id);\r\n\tif (Callback != nullptr " +
                    "&& (*Callback) != nullptr)\r\n\t{\r\n\t\t(*Callback)(*Update);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tEnqueu" +
                    "eUpdate(Id, Update);\r\n\t}\r\n}\r\n\r\nvoid UCallbackDispatcher::EnqueueUpdate(const FCo" +
                    "mponentIdentifier& Id, UComponentUpdateOpWrapperBase* Update)\r\n{\r\n\tFComponentUpd" +
                    "ateQueue* Queue = QueuedUpdates.Find(Id);\r\n\tif (!Queue)\r\n\t{\r\n\t\tQueue = &QueuedUp" +
                    "dates.Emplace(Id, FComponentUpdateQueue());\r\n\t}\r\n\tQueue->AddToQueue(Update);\r\n}\r" +
                    "\n\r\nvoid UCallbackDispatcher::DispatchQueuedUpdates(const FComponentIdentifier& I" +
                    "d)\r\n{\r\n\tFComponentUpdateQueue* PendingUpdateQueue = QueuedUpdates.Find(Id);\r\n\tif" +
                    " (PendingUpdateQueue)\r\n\t{\r\n\t\tauto Callback = ComponentUpdateCallbacks.Find(Id);\r" +
                    "\n\t\tif (Callback != nullptr && (*Callback) != nullptr)\r\n\t\t{\r\n\t\t\tfor (auto QueuedU" +
                    "pdate : PendingUpdateQueue->GetQueue())\r\n\t\t\t{\r\n\t\t\t\t(*Callback)(*QueuedUpdate);\r\n" +
                    "\t\t\t}\r\n\t\t}\r\n\t\tQueuedUpdates.Remove(Id);\r\n\t}\r\n}\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 119 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 foreach (var unrealComponent in unrealComponents) { 
            
            #line default
            #line hidden
            
            #line 120 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("void UCallbackDispatcher::On");
            
            #line default
            #line hidden
            
            #line 120 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 120 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("ComponentUpdateOp(const worker::ComponentUpdateOp<");
            
            #line default
            #line hidden
            
            #line 120 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 120 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(">& Op) {\r\n\tU");
            
            #line default
            #line hidden
            
            #line 121 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 121 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("ComponentUpdate* WrappedUpdate = NewObject<U");
            
            #line default
            #line hidden
            
            #line 121 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 121 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("ComponentUpdate>();\r\n\tif (WrappedUpdate)\r\n\t{\r\n\t\tWrappedUpdate->InitInternal(Op.Up" +
                    "date);\r\n\t\tWrappedUpdate->ComponentId = ");
            
            #line default
            #line hidden
            
            #line 125 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 125 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("::ComponentId;\r\n\t\tWrappedUpdate->EntityId = Op.EntityId;\r\n\r\n\t\tHandleUpdate(Wrappe" +
                    "dUpdate);\r\n\t}\r\n}\r\n\r\nvoid UCallbackDispatcher::On");
            
            #line default
            #line hidden
            
            #line 132 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.CapitalisedName ));
            
            #line default
            #line hidden
            
            #line 132 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write("AuthorityChangeOp(const worker::AuthorityChangeOp& Op) {\r\n\tconst worker::Componen" +
                    "tId ComponentId = ");
            
            #line default
            #line hidden
            
            #line 133 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( unrealComponent.UnderlyingQualifiedName ));
            
            #line default
            #line hidden
            
            #line 133 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
            this.Write(@"::ComponentId;

	auto Callback = AuthorityChangeCallbacks.Find(FComponentIdentifier{Op.EntityId, ComponentId});
	if(Callback != nullptr && (*Callback) != nullptr)
	{
		(*Callback)(Op);
	}

	OnAuthorityChangeOpReceived.Broadcast(ComponentId, Op);
}

");
            
            #line default
            #line hidden
            
            #line 144 "Templates\UnrealCallbackDispatcherImplementationGenerator.tt"
 } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class UnrealCallbackDispatcherImplementationGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
