<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#

#>
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// =========== 

#pragma once

#include "CoreMinimal.h"
#include "improbable/collections.h"

<# foreach (var requiredInclude in mapTypeReference.ValueType.RequiredIncludes) { #>
#include <#= requiredInclude #>
<# } #>

<# foreach (var requiredInclude in mapTypeReference.KeyType.RequiredIncludes) { #>
#include <#= requiredInclude #>
<# } #>

#include "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map.generated.h"

/**
 *
 */
UCLASS(BlueprintType)
class SPATIALGDK_API U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map : public UObject
{
    GENERATED_BODY()

  public:
    U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map();
    U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map* Init(const worker::Map<<#= mapTypeReference.KeyType.UnderlyingQualifiedName #>, <#= mapTypeReference.ValueType.UnderlyingQualifiedName #>>& underlying);

    UFUNCTION(BlueprintCallable, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map* Emplace(<#= mapTypeReference.KeyType.ArgumentName #> key, <#= mapTypeReference.ValueType.ArgumentName #> value);

    UFUNCTION(BlueprintCallable, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map* Remove(<#= mapTypeReference.KeyType.ArgumentName #> key);

    UFUNCTION(BlueprintPure, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    bool Contains(<#= mapTypeReference.KeyType.ArgumentName #> key);

    UFUNCTION(BlueprintCallable, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    <#= mapTypeReference.ValueType.UnrealType #> Get(<#= mapTypeReference.KeyType.ArgumentName #> key);

    UFUNCTION(BlueprintCallable, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    U<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map* Clear();

    UFUNCTION(BlueprintPure, Category = "<#= mapTypeReference.KeyType.UnderlyingCapitalisedName #>To<#= mapTypeReference.ValueType.UnderlyingCapitalisedName #>Map")
    bool IsEmpty();

    worker::Map<<#= mapTypeReference.KeyType.UnderlyingQualifiedName #>, <#= mapTypeReference.ValueType.UnderlyingQualifiedName #>> GetUnderlying();

	bool operator==(const worker::Map<<#= mapTypeReference.KeyType.UnderlyingQualifiedName #>, <#= mapTypeReference.ValueType.UnderlyingQualifiedName #>>& OtherUnderlying) const;
	bool operator!=(const worker::Map<<#= mapTypeReference.KeyType.UnderlyingQualifiedName #>, <#= mapTypeReference.ValueType.UnderlyingQualifiedName #>>& OtherUnderlying) const;

  private:
    worker::Map<<#= mapTypeReference.KeyType.UnderlyingQualifiedName #>, <#= mapTypeReference.ValueType.UnderlyingQualifiedName #>> Underlying;
};
