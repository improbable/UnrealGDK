<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#

#>
// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// ===========
// DO NOT EDIT - this file is automatically regenerated.
// ===========

#pragma once

#include "UObject/Class.h"
#include "SpatialGDKViewTypes.h"
#include "SpatialGDKWorkerTypes.h"
#include "ComponentIdentifier.h"
#include "ComponentUpdateQueue.h"
<# foreach (var packageInclude in packageIncludes) { #>
#include "<#= packageInclude #>"
<# } #>
#include "ScopedViewCallbacks.h"
#include "SpatialOS.h"
#include "CallbackDispatcher.generated.h"

class UComponentUpdateOpWrapperBase;

DECLARE_EVENT_TwoParams( UCallbackDispatcher, FAuthorityChangeOpReceivedEvent, worker::ComponentId, const worker::AuthorityChangeOp&);

UCLASS()
class SPATIALGDK_API UCallbackDispatcher : public UObject
{
	GENERATED_BODY()

public:
	UCallbackDispatcher();

	/**
	* Initialise the UCallbackDispatcher. Calling Init() more than once results in an error.
	*/
	void Init(const TWeakPtr<SpatialOSView>& InView);

	/**
	* Reset the UCallbackDispatcher to its initial state. Init() may be called again after this method is called.
	*/
	void Reset();

	void AddComponentUpdateCallback(worker::EntityId EntityId, worker::ComponentId ComponentId, TFunction<void(UComponentUpdateOpWrapperBase&)> Callback);
	void AddAuthorityChangeCallback(worker::EntityId EntityId, worker::ComponentId ComponentId, TFunction<void(const worker::AuthorityChangeOp&)> Callback);

	void RemoveComponentUpdateCallback(worker::EntityId EntityId, worker::ComponentId ComponentId);
	void RemoveAuthorityChangeCallback(worker::EntityId EntityId, worker::ComponentId ComponentId);

	FAuthorityChangeOpReceivedEvent OnAuthorityChangeOpReceived;

<# foreach (var unrealComponent in unrealComponents) { #>
	void On<#= unrealComponent.CapitalisedName #>ComponentUpdateOp(const worker::ComponentUpdateOp<<#= unrealComponent.UnderlyingQualifiedName #>>& Op);
	void On<#= unrealComponent.CapitalisedName #>AuthorityChangeOp(const worker::AuthorityChangeOp& Op);

<# } #>

private:
	TMap<FComponentIdentifier, TFunction<void(UComponentUpdateOpWrapperBase&)>> ComponentUpdateCallbacks;
	TMap<FComponentIdentifier, TFunction<void(const worker::AuthorityChangeOp&)>> AuthorityChangeCallbacks;

	UPROPERTY()
	TMap<FComponentIdentifier, FComponentUpdateQueue> QueuedUpdates;

	void HandleUpdate(UComponentUpdateOpWrapperBase* Update);
	void EnqueueUpdate(const FComponentIdentifier& Id, UComponentUpdateOpWrapperBase* Update);
	void DispatchQueuedUpdates(const FComponentIdentifier& Id);

	improbable::unreal::callbacks::FScopedViewCallbacks Callbacks;
	bool bInitialised;
};
