using Improbable.CodeGen.Base;
using System;
using System.Linq;

namespace Improbable.CodeGen.Unreal
{
    static class EnumGenerator
    {
        public static string GenerateTopLevelEnum(EnumDefinition enumDefinition, Bundle bundle)
        {
            var enumNamespace = Text.GetNamespaceFromTypeName(enumDefinition.QualifiedName);

            return $@"// Generated by {UnrealGenerator.GeneratorTitle}

#pragma once

#include <cstdint>
#include <functional>

{string.Join(Environment.NewLine, enumNamespace.Select(t => $"namespace {t} {{"))}

{GenerateEnum(enumDefinition.Name, enumDefinition, bundle)}

{string.Join(Environment.NewLine, enumNamespace.Reverse().Select(t => $"}} // namespace {t}"))}
";
        }
        
        public static string GenerateEnum(string name, EnumDefinition enumDefinition, Bundle bundle)
        {

            return $@"// Generated from {bundle.TypeToFileName[enumDefinition.QualifiedName]}({enumDefinition.SourceReference.Line},{enumDefinition.SourceReference.Column})
enum class {name} : uint32
{{
{Text.Indent(1, string.Join(Environment.NewLine, enumDefinition.Values.Select(v => $"{v.Name} = {v.Value},")))}
}};";
        }
    }
}
