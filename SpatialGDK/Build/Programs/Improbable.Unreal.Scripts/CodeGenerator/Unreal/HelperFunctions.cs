using Improbable.Codegen.Base;
using Improbable.CodeGen.Base;
using System.Collections.Generic;

namespace Improbable.CodeGen.Unreal
{
    public static class HelperFunctions
    {
        public static string HeaderPath = "ExternalSchemaHelperFunctions.h";
        public static string SourceFile = "ExternalSchemaHelperFunctions.cpp";

        public static List<GeneratedFile> GetHelperFunctionFiles()
        {
            return new List<GeneratedFile>
            {
                new GeneratedFile(HeaderPath, GetHelperFunctionHeader()),
                new GeneratedFile(SourceFile, GetHelperFunctionSource())
            };
        }

        private static string GetHelperFunctionHeader()
        {
            return $@"// Generated by {UnrealGenerator.GeneratorTitle}

#pragma once

#include <cstddef>
#include <cstdint>
#include <functional>
#include <string>
#include <vector>
#include <WorkerSDK/improbable/c_schema.h>
#include <WorkerSDK/improbable/c_worker.h>

#include ""CoreMinimal.h""

namespace improbable {{

class SpatialType
{{
public:
{Text.Indent(1, $@"virtual ~SpatialType() = 0 {{}};
virtual void Serialize(Schema_Object* SchemaObject) const = 0;")}
}};

class SpatialComponent
{{
public:
{Text.Indent(1, $@"virtual ~SpatialComponent() = 0 {{}};
virtual void Serialize(Schema_ComponentData* ComponentData) const = 0;")}
}};

class SpatialComponentUpdate
{{
public:
{Text.Indent(1, $@"virtual ~SpatialComponentUpdate() = 0 {{}};
virtual void Serialize(Schema_ComponentUpdate* ComponentUpdate) const = 0;")}
}};

class ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"ExternalSchemaOp(Worker_EntityId EntityId) : EntityId{{ EntityId }} {{}}
Worker_EntityId EntityId;
virtual ~ExternalSchemaOp() = 0 {{}};")}
}};

template<typename ComponentData>
class AddComponentOp : public ::improbable::ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"AddComponentOp(
{Text.Indent(1, $@"Worker_EntityId EntityId, 
Worker_ComponentId ComponentId, 
const ComponentData& Data) ")}
: ExternalSchemaOp( EntityId )
, ComponentId(ComponentId )
, Data( Data ) {{}}

Worker_ComponentId ComponentId; 
ComponentData Data;")}
}};

template<typename ComponentClass>
class RemoveComponentOp : public ::improbable::ExternalSchemaOp 
{{
public:
{Text.Indent(1, $@"RemoveComponentOp(
{Text.Indent(1, $@"Worker_EntityId EntityId, 
Worker_ComponentId ComponentId)")}
: ExternalSchemaOp( EntityId )
, ComponentId( ComponentId ) {{}}

Worker_ComponentId ComponentId;")}
}};

template<typename ComponentUpdate>
class ComponentUpdateOp : public ::improbable::ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"ComponentUpdateOp(
{Text.Indent(1, $@"Worker_EntityId EntityId, 
Worker_ComponentId ComponentId, 
const ComponentUpdate& Update)")}
: ExternalSchemaOp(EntityId)
, ComponentId(ComponentId)
, Update(Update) {{}}

Worker_ComponentId ComponentId;
ComponentUpdate Update;")}
}};

template<typename T> // just to differentiate type aliases
class AuthorityChangeOp : public ::improbable::ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"AuthorityChangeOp(
{Text.Indent(1, $@"Worker_EntityId EntityId, 
Worker_ComponentId ComponentId, Worker_Authority Authority)")}
: ExternalSchemaOp( EntityId )
, ComponentId( ComponentId )
, Authority( Authority ) {{}}

Worker_ComponentId ComponentId;
Worker_Authority Authority;")}
}};

template<typename RequestData>
class CommandRequestOp : public ::improbable::ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"CommandRequestOp(
{Text.Indent(1, $@"Worker_EntityId EntityId, 
Worker_RequestId RequestId,
uint32_t TimeoutMillis, 
const char* CallerWorkerId, 
Worker_WorkerAttributes CallerAttributeSet, 
const RequestData& Data)")}
: ExternalSchemaOp(EntityId)
, RequestId(RequestId)
, TimeoutMillis(TimeoutMillis)
, CallerWorkerId(CallerWorkerId)
, CallerAttributeSet(CallerAttributeSet)
, Data(Data) {{}}

Worker_RequestId RequestId;
uint32_t TimeoutMillis;
const char* CallerWorkerId;
Worker_WorkerAttributes CallerAttributeSet;
RequestData Data;")}
}};

template<typename ResponseData>
class CommandResponseOp : public ::improbable::ExternalSchemaOp
{{
public:
{Text.Indent(1, $@"CommandResponseOp(Worker_EntityId EntityId, 
{Text.Indent(1, $@"Worker_RequestId RequestId, 
uint8_t StatusCode, 
const char* Message, 
uint32_t CommandId, 
const ResponseData& Data)")} 
: ExternalSchemaOp(EntityId)
, RequestId(RequestId)
, StatusCode(StatusCode)
, Message(Message)
, CommandId(CommandId)
, Data(Data) {{}}

Worker_RequestId RequestId;
uint8_t StatusCode;
const char* Message;
uint32_t CommandId;
ResponseData Data;")}
}};

namespace utils {{
{Text.Indent(1, $@"// Utility methods for serializing and deserializing string fields
void AddBytes(Schema_Object* SchemaObject, Schema_FieldId FieldId, const TArray<uint8>& Value);
void AddString(Schema_Object* SchemaObject, Schema_FieldId FieldId, FString Value);
TArray<uint8> GetBytes(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
FString GetString(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<FString> GetStringList(const Schema_Object* SchemaObject, Schema_FieldId FieldId);
{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<TArray<uint8>> GetBytesList(const Schema_Object* SchemaObject, Schema_FieldId FieldId);")}
}} // namespace utils
}} // namespace improbable

inline uint32 GetTypeHash(const TArray<uint8>& Value);
";
        }

        private static string GetHelperFunctionSource()
        {
            return $@"// Generated by {UnrealGenerator.GeneratorTitle}

#include ""{HeaderPath}""

namespace improbable {{
namespace utils {{

void AddBytes(Schema_Object* SchemaObject, Schema_FieldId FieldId, const TArray<uint8>& Value)
{{
{Text.Indent(1, $@"uint32 BytesLength = Value.Num();
uint8* ByteBuffer = Schema_AllocateBuffer(SchemaObject, BytesLength);
memcpy(ByteBuffer, Value.GetData(), BytesLength);
Schema_AddBytes(SchemaObject, FieldId, ByteBuffer, BytesLength);")}
}}

void AddString(Schema_Object* SchemaObject, Schema_FieldId FieldId, FString Value)
{{
{Text.Indent(1, $@"const char* Text = TCHAR_TO_ANSI(*Value);
uint32 TextLength = sizeof(char) * strlen(Text); // ensure to exclude null-terminator
uint8* TextBuffer = Schema_AllocateBuffer(SchemaObject, TextLength);
memcpy(TextBuffer, Text, TextLength);
Schema_AddBytes(SchemaObject, FieldId, TextBuffer, TextLength);")}
}}

TArray<uint8> GetBytes(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{{
{Text.Indent(1, $@"uint32 BytesLength = Schema_GetBytesLength(SchemaObject, FieldId);
const uint8* Bytes = Schema_GetBytes(SchemaObject, FieldId);
return TArray<uint8>(Bytes, BytesLength);")}
}}

FString GetString(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{{
{Text.Indent(1, $@"uint32 TextLength = Schema_GetBytesLength(SchemaObject, FieldId);
const uint8* Text = Schema_GetBytes(SchemaObject, FieldId);
return FString(TextLength, ANSI_TO_TCHAR(reinterpret_cast<const char*>(Text)));")}
}}

{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<TArray<uint8>> GetBytesList(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{{
{Text.Indent(1, $@"{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<TArray<uint8>> BytesList{{}};
auto ListSize =  Schema_GetBytesCount(SchemaObject, FieldId);
for (uint32 i = 0; i < ListSize; ++i)
{{
{Text.Indent(1, $@"uint32 BytesLength = Schema_IndexBytesLength(SchemaObject, FieldId, i);
const uint8* Bytes = Schema_IndexBytes(SchemaObject, FieldId, i);
BytesList.Add(TArray<uint8>(Bytes, BytesLength));")}
}}
return BytesList;")}
}}

{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<FString> GetStringList(const Schema_Object* SchemaObject, Schema_FieldId FieldId)
{{
{Text.Indent(2, $@"{Types.CollectionTypesToQualifiedTypes[Types.Collection.List]}<FString> StringList{{}};
auto ListSize =  Schema_GetBytesCount(SchemaObject, FieldId);
for (uint32 i = 0; i < ListSize; ++i)
{{
{Text.Indent(1, $@"uint32 TextLength = Schema_IndexBytesLength(SchemaObject, FieldId, i);
const uint8* Text = Schema_IndexBytes(SchemaObject, FieldId, i);
StringList.Add(FString(TextLength, ANSI_TO_TCHAR(reinterpret_cast<const char*>(Text))));")}
}}
return StringList;")}
}}

}} // namespace utils
}} // namespace improbable

uint32 GetTypeHash(const TArray<uint8>& Value)
{{
{Text.Indent(1, $@"size_t Result = 1327;
for (const auto& item : Value)
{{
{Text.Indent(1, $"Result = (Result * 977) + GetTypeHash(item);")}
}}
return Result;")}
}}
";
        }
    }
}
